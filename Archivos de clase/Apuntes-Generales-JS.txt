Apuntes

Cuando los applets de java fallaron, Javascript se convirtió en el lenguaje por default para la web.

El estandar que define javascript actualmente es el ECMAScript en subtercera edición. Javascript es un subconjunto correcto de ECMAScript.

La popularidad de Javascript es independiente de sus cualidades como lenguaje de programación.

Javascript es un lenguaje de programación altamente expresivo y dinámico.

El conjunto de buenas partes de javascrippt es mejor que el lenguaje completo, lo hace mas confiable, legible y mantenible.

Javascript se puede subdividir en un conjunto de buenas y malas partes, es recomendable enfocarse en las buenas y evitar las malas.


La API del browser, es el DOM, Document Object Model
El DOM está pobremente specificado e implementado inconsistentemente. Esto tiene relación con que la implementación del DOM difiere según el explorador y se vuelve necesario el aprendizaje tomando en cuenta el cross browser compatibility. Jquery, por ejemplo, facilita las diferencias de cada navegador y hace las aps mas compatibles.

Javascript tiene diferencias significativas a cualquier otro lenguaje de programación. Es un lenguaje orientado a objetos, basado en prototypos, funcional y asincrono. También es maneja los scopes de manera distinta a los lenguajes tradicionales.

La programación funcional es muy divertida.

Las ideas buenas en javascript son: funciones, ausencia de validación de tipos de datos, Objetos dinámicos y una notación de literales de objetos muy expresiva(arrays, objects, functions )

Las malas ideas principalmente son: modelo de programación basada en variables globales(Se relaciona con el namespace, el contexto global del objeto global window, los scopes y los patrones de invocación de funciones)

Las funciones son objetos de primera clase con un ámbito(scope) léxico.
Nunca olvidemos que las funciones son valores.

Crockford no recomienda el uso de funciones constructoras de objetos. Menciona que hay mejores alternativas.

Javascript es el primer lenguaje lambda en volverse popular(Lambda se refiere al funcionamiento de las funciones como valores, creo)

Javascript se parece a Lisp y Scheme, y poco a java.

El hecho de que javascript sea loosely typed lenguage, elimina la necesidad de hacer jerarquías complejas de clases, hacer casting, etc.

La notación de literales de objeto en javascript, es la inspiración para JSON, el formato popular de intercambio de datos.

Un aspecto controversial de javascript es el tema de la herencia prototipica, basada en prototipos mas que en clases. El lenguaje está libre de clases y los objetos heredan propiedades directamente de otros.

No es conveniente usar patrones de diseño basado en clases en javascript, conviene aprender la naturaleza pototipica del lenguaje.

Javascript es muy difamado por la elección de sus conceptos clave. Uno de ellos que realmente es malo es que depende de las variables globales para su vinculación. Todas las variables de nivel superior y todas la unidades de compilación son puestas juntas en el espacio de nombres llamado el objeto global, osea window. Las variables globales son evil pero fundamentales en javascript. Javascript provee mecanismos para enfrentar el problema.

Aunque las malas partes existen y deben ser evitadas, tampoco se pueden ignorar. Según crockford, las malas partes son:

Hay que investigarlas mas y determinar porqué según el son malas...

El mal uso de los equality operators ==
with statement
eval function
continue statement
switch statement
el uso de las sentencias sin bloque
Operadores de incremento y decremento
Operadores a nivel de bits
La diferencia de la función declarada y como expresión
El hoisting
Typed wrappers
el uso de new
el uso de avoid

Algunas herramientas para trabajar con Javascript:

JSLint, es un parser(analizador) de javascript que es muy estricto y evidencía las malas partes.





































